<?php

namespace COC\COCBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserInfoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlayerRepository extends EntityRepository
{
    public function getPlayersBySeason($season)
    {
        $now = new \DateTime();
        // $now = new \DateTime('Y-m-d H:i:s');
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->where('u.season = :season')
            ->orderBy('u.level', 'DESC')
            ->setParameter('season', $season);

        return $qb->getQuery()->getResult();
    }

    public function getTotalDefence()
    {
        $qb = $this->createQueryBuilder('u')
            ->select('p.level')
            ->from('COCBundle:player','p')
            ->orderBy('p.id','DESC')
            ->getQuery();

        return $qb->getResult();
    }

    public function getLastUpdate($clan)
    {
        $query = $this->_em->createQuery('SELECT m.updatedAt FROM COCBundle:Player m WHERE m.clan = :clan ORDER BY m.updatedAt DESC')
            ->setMaxResults(1)
            ->setParameter('clan', $clan);
        return $query->getOneOrNullResult();

    }

    public function getAllPlayersModule($clan)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p')

            ->where('p.clan = :clan')
            ->orderBy('p.updatedAt', 'DESC')
            ->setParameter('clan', $clan)
            ->setMaxResults( 5 );

        return $qb->getQuery()->getResult();
    }


    public function getAllPlayers($id_clan)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p')
            ->where('p.clan = :clan')
            ->orderBy('p.level', 'DESC')
            ->setParameter('clan', $id_clan);

        return $qb->getQuery()->getResult();
    }


    public function getAllActivityPlayers($id_clan)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p.id, p.level, p.name, p.troopSent, p.troopReceived, p.attackWon, p.trophy, p.updatedAt')
            ->where('p.clan = :clan')
            ->orderBy('p.attackWon', 'DESC')
            ->setParameter('clan', $id_clan);

        return $qb->getQuery()->getResult();
    }


    public function getTotalAttack()
    {
        $qb = $this->createQueryBuilder('p');
        $qb->addSelect('(
            ((p.mortar1 + 1) * p.mortar1) / 2) + ((p.mortar2 + 1) * p.mortar2) / 2 + ((p.mortar3 + 1) * p.mortar3) / 2 + ((p.mortar4 + 1) * p.mortar4) / 2

            as totalDefence'
        );

        return $qb->getQuery()->getResult();
    }


    public function getPlayers($clan)
    {
        $query = $this->createQueryBuilder('player')
            ->leftJoin('player.user', 'u')
            ->where('player.clan = :clan')

            ->setParameter('clan', $clan);

        return $query->getQuery()->getResult();
    }

    public function getPlayer($id_player)
    {
        $query = $this->createQueryBuilder('player')
            ->leftJoin('player.user', 'u')
            ->where('player.id = :id')
            ->setParameter('id', $id_player);

        return $query->getQuery()->getSingleResult();
    }


    public function getNumberEntities($clan)
    {
        $qb = $this->createQueryBuilder('u')
            ->where('u.clan = :clan')
            ->select('u')
            ->setParameter('clan', $clan);

        return count($qb->getQuery()->getResult());
    }

    public function getHistory($number = 0)
    {
        if ( $number == 0)
        {
            $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->orderBy('u.updatedAt', 'DESC');
        }
        else
        {
            $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->orderBy('u.updatedAt', 'DESC')
                ->setMaxResults( $number );
        }

        //var_dump($qb->getQuery()->getResult());
        return $qb->getQuery()->getResult();
    }


    public function getNotAssociedToUser($clan)
    {
        $query = $this->createQueryBuilder('player')
            ->leftJoin('player.user', 'u')
            ->where('player.clan = :clan')
            ->andWhere('u.player is null')

            ->setParameter('clan', $clan);

        return $query;
    }

    public function getPlayerFromSession($user)
    {
        $query = $this->createQueryBuilder('player')
            ->leftJoin('player.user', 'u')
            ->where('u = :user')


            ->setParameter('user', $user);

        return $query->getQuery()->getSingleResult();
    }


}