<?php

namespace COC\COCBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserInfoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlayerRepository extends EntityRepository
{
    public function getPlayersBySeason($season)
    {
        $now = new \DateTime();
        // $now = new \DateTime('Y-m-d H:i:s');
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->where('u.season = :season')
            ->orderBy('u.level', 'DESC')
            ->setParameter('season', $season);

        return $qb->getQuery()->getResult();
    }

    public function getTotalDefence()
    {
        $qb = $this->createQueryBuilder('u')
            ->select('p.level')
            ->from('COCBundle:player','p')
            ->orderBy('p.id','DESC')
            ->getQuery();

        return $qb->getResult();
    }

    public function getAllPlayers()
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p.level, p.name, p.mortar1, p.updatedAt,

            (p.mortar1 + 1) * p.mortar1 / 2 + (p.mortar1 + 1) * p.mortar1 / 2 + (p.mortar3 + 1) * p.mortar3 / 2 + (p.mortar4+ 1) * p.mortar4 / 2 +
            (p.inferno1 + 1) * p.inferno1 / 2 + (p.inferno1 + 1) * p.inferno1 / 2 +
            (p.tesla1 + 1) * p.tesla1 / 2 + (p.tesla1 + 1) * p.tesla1 / 2 + (p.tesla3 + 1) * p.tesla3 / 2 + (p.tesla4+ 1) * p.tesla4 / 2 +
            (p.queen + 1) * p.queen / 2 + (p.king + 1) * p.king / 2 +
            (p.arcx1 + 1) * p.arcx1 / 2 + (p.arcx1 + 1) * p.arcx1 / 2 + + (p.arcx1 + 1) * p.arcx1 / 2 +
            (p.tower_archer1 + 1) * p.tower_archer1 / 2 + (p.tower_archer1 + 1) * p.tower_archer1 / 2 + (p.tower_archer3 + 1) * p.tower_archer3 / 2 + (p.tower_archer4+ 1) * p.tower_archer4 / 2 + (p.tower_archer5+ 1) * p.tower_archer5 / 2 + (p.tower_archer6+ 1) * p.tower_archer6 / 2 +(p.tower_archer1 + 1) * p.tower_archer1 / 2 + (p.tower_archer1 + 1) * p.tower_archer1 / 2 + (p.tower_archer3 + 1) * p.tower_archer3 / 2 + (p.tower_archer4+ 1) * p.tower_archer4 / 2 + (p.tower_archer5+ 1) * p.tower_archer5 / 2 + (p.tower_archer6+ 1) * p.tower_archer6 / 2 + + (p.tower_archer6+ 1) * p.tower_archer6 / 2 +
            (p.air_defence1 + 1) * p.air_defence1 / 2 + (p.air_defence1 + 1) * p.air_defence1 / 2 + (p.air_defence3 + 1) * p.air_defence3 / 2 + (p.air_defence4+ 1) * p.air_defence4 / 2 +
            (p.tower_magic1 + 1) * p.tower_magic1 / 2 + (p.tower_magic1 + 1) * p.tower_magic1 / 2 + (p.tower_magic3 + 1) * p.tower_magic3 / 2 + (p.tower_magic4+ 1) * p.tower_magic4 / 2
            as totalDefence,

            (((p.archer + 1) * p.archer / 2)  +
            ((p.barbar + 1) * p.barbar / 2) +
            ((p.geant + 1) * p.geant / 2) +
            ((p.wizard + 1) * p.wizard / 2) +
            ((p.dragon + 1) * p.dragon / 2) +
            ((p.wall_breaker + 1) * p.wall_breaker / 2) +
            ((p.pekka + 1) * p.pekka / 2) +
            ((p.ballon + 1) * p.ballon / 2) +
            ((p.healer + 1) * p.healer / 2) +
            ((p.gobelin + 1) * p.gobelin / 2) +
            ((p.minion + 1) * p.minion / 2) +
            ((p.rider + 1) * p.rider / 2) +
            ((p.valkyrie + 1) * p.valkyrie / 2) +
            ((p.golem + 1) * p.golem / 2) +
            ((p.lava + 1) * p.lava / 2) +
            ((p.witch + 1) * p.witch / 2) +
            ((p.king + 1) * p.king / 2) +
            ((p.queen + 1) * p.queen / 2) +
            ((p.potion_heal + 1) * p.potion_heal / 2) +
            ((p.potion_boost + 1) * p.potion_boost / 2) +
            ((p.potion_damage + 1) * p.potion_damage / 2) +
            ((p.potion_green + 1) * p.potion_green / 2) +
            ((p.potion_freeze + 1) * p.potion_freeze / 2) )

            as totalAttack,

            (p.mortar1 + 1) * p.mortar1 / 2 + (p.mortar1 + 1) * p.mortar1 / 2 + (p.mortar3 + 1) * p.mortar3 / 2 + (p.mortar4+ 1) * p.mortar4 / 2 +
            (p.inferno1 + 1) * p.inferno1 / 2 + (p.inferno1 + 1) * p.inferno1 / 2 +
            (p.tesla1 + 1) * p.tesla1 / 2 + (p.tesla1 + 1) * p.tesla1 / 2 + (p.tesla3 + 1) * p.tesla3 / 2 + (p.tesla4+ 1) * p.tesla4 / 2 +
            (p.queen + 1) * p.queen / 2 + (p.king + 1) * p.king / 2 +
            (p.arcx1 + 1) * p.arcx1 / 2 + (p.arcx1 + 1) * p.arcx1 / 2 + + (p.arcx1 + 1) * p.arcx1 / 2 +
            (p.tower_archer1 + 1) * p.tower_archer1 / 2 + (p.tower_archer1 + 1) * p.tower_archer1 / 2 + (p.tower_archer3 + 1) * p.tower_archer3 / 2 + (p.tower_archer4+ 1) * p.tower_archer4 / 2 + (p.tower_archer5+ 1) * p.tower_archer5 / 2 + (p.tower_archer6+ 1) * p.tower_archer6 / 2 +(p.tower_archer1 + 1) * p.tower_archer1 / 2 + (p.tower_archer1 + 1) * p.tower_archer1 / 2 + (p.tower_archer3 + 1) * p.tower_archer3 / 2 + (p.tower_archer4+ 1) * p.tower_archer4 / 2 + (p.tower_archer5+ 1) * p.tower_archer5 / 2 + (p.tower_archer6+ 1) * p.tower_archer6 / 2 + + (p.tower_archer6+ 1) * p.tower_archer6 / 2 +
            (p.air_defence1 + 1) * p.air_defence1 / 2 + (p.air_defence1 + 1) * p.air_defence1 / 2 + (p.air_defence3 + 1) * p.air_defence3 / 2 + (p.air_defence4+ 1) * p.air_defence4 / 2 +
            (p.tower_magic1 + 1) * p.tower_magic1 / 2 + (p.tower_magic1 + 1) * p.tower_magic1 / 2 + (p.tower_magic3 + 1) * p.tower_magic3 / 2 + (p.tower_magic4+ 1) * p.tower_magic4 / 2 +
             (((p.archer + 1) * p.archer / 2)  + ((p.barbar + 1) * p.barbar / 2) + ((p.geant+ 1) * p.geant/ 2) + ((p.wizard + 1) * p.wizard / 2) + ((p.dragon + 1) * p.dragon / 2) + ((p.wall_breaker + 1) * p.wall_breaker / 2) + ((p.pekka + 1) * p.pekka / 2) + ((p.ballon + 1) * p.ballon / 2) + ((p.healer + 1) * p.healer / 2) + ((p.gobelin + 1) * p.gobelin / 2) + ((p.minion + 1) * p.minion / 2) + ((p.rider + 1) * p.rider / 2) + ((p.valkyrie + 1) * p.valkyrie / 2) + ((p.golem + 1) * p.golem / 2) + ((p.lava + 1) * p.lava / 2) + ((p.witch + 1) * p.witch / 2) + ((p.king + 1) * p.king / 2) + ((p.queen + 1) * p.queen / 2) + ((p.potion_heal + 1) * p.potion_heal / 2) + ((p.potion_boost + 1) * p.potion_boost / 2) + ((p.potion_damage + 1) * p.potion_damage / 2) + ((p.potion_green + 1) * p.potion_green / 2) + ((p.potion_freeze + 1) * p.potion_freeze / 2) ) * 4
            as total



            '

            )

            ->orderBy('total','DESC');

        return $qb->getQuery()->getResult();
    }

    public function getTotalAttack()
    {
        $qb = $this->createQueryBuilder('p');
        $qb->addSelect('(
            ((p.mortar1 + 1) * p.mortar1) / 2) + ((p.mortar2 + 1) * p.mortar2) / 2 + ((p.mortar3 + 1) * p.mortar3) / 2 + ((p.mortar4 + 1) * p.mortar4) / 2

            as totalDefence'
        );

        return $qb->getQuery()->getResult();
    }


    public function getPlayers()
{
    $qb = $this->createQueryBuilder('u')
        ->select('u')
        ->orderBy('u.level', 'DESC');

    return $qb->getQuery()->getResult();
}


    public function getNumberPlayers()
    {
        $qb = $this->createQueryBuilder('u')
            ->select('u');

        return count($qb->getQuery()->getResult());
    }

    public function getHistory($number = 0)
    {
        if ( $number == 0)
        {
            $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->orderBy('u.updatedAt', 'DESC');
        }
        else
        {
            $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->orderBy('u.updatedAt', 'DESC')
                ->setMaxResults( $number );
        }

        //var_dump($qb->getQuery()->getResult());
        return $qb->getQuery()->getResult();
    }


    public function getNotAssociedToUser()
    {

        $qb = $this->createQueryBuilder('p')
            ->select('p')
            ->where('p.user is null');

        return $qb;
    }
}